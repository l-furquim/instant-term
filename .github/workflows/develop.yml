name: Deploy to dev

on: 
  push:
    branches: ["develop"]

permissions:
  id-token: write
  contents: read

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      destroy: ${{ steps.set.outputs.destroy }}
    steps:
      - name: Set destroy variable
        id: set
        run: echo "destroy=false" >> $GITHUB_OUTPUT

  validate-go:
    name: Validate Go Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21' # Ajuste para a versão que você está usando
          cache: true

      - name: Verify dependencies
        run: go mod verify

      - name: Check Go formatting
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "The following files are not formatted correctly:"
            gofmt -s -l .
            exit 1
          fi

      - name: Run go vet
        run: go vet ./...

      - name: Install golangci-lint
        uses: golangci/golangci-lint-action@v4
        with:
          version: latest
          args: --timeout=5m

      - name: Run tests
        run: go test -v -race -coverprofile=coverage.out ./...

      - name: Check test coverage
        run: |
          go tool cover -func=coverage.out
          COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
          echo "Total coverage: ${COVERAGE}%"
          # Defina um limite mínimo de cobertura (exemplo: 70%)
          if (( $(echo "${COVERAGE} < 70" | bc -l) )); then
            echo "Coverage ${COVERAGE}% is below minimum threshold of 70%"
            exit 1
          fi

      - name: Build server
        run: |
          cd server
          go build -v ./...

      - name: Build CLI
        run: |
          cd cli
          go build -v ./...

      - name: Check for vulnerabilities
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck ./...

  terraform:
    needs: [prepare, validate-go]
    uses: ./.github/workflows/terraform.yml
    with:
      environment: dev
      aws-region: "us-east-1"
      destroy: ${{ needs.prepare.outputs.destroy }}
    secrets:
      AWS_ASSUME_ROLE_ARN: ${{ secrets.AWS_ASSUME_ROLE_ARN }}
      AWS_STATE_S3_BUCKET: ${{ secrets.AWS_STATE_S3_BUCKET }}
      AWS_LOCK_DYNAMODB_TABLE: ${{ secrets.AWS_LOCK_DYNAMODB_TABLE }}

  ecs-build-deploy:
    needs: [prepare, terraform, validate-go]
    if: ${{ needs.prepare.outputs.destroy == 'false' }}
    uses: ./.github/workflows/ecs.yml
    with:
      environment: dev
      aws-region: "us-east-1"
      cluster-name: ${{ needs.terraform.outputs.cluster_name }}
      cli-task-arn: ${{ needs.terraform.outputs.cli_task_definition_arn }}
      server-task-arn: ${{ needs.terraform.outputs.server_task_definition_arn }}
    secrets:
      AWS_ASSUME_ROLE_ARN: ${{ secrets.AWS_ASSUME_ROLE_ARN }}
