name: "Build and Deploy to ECS"

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      aws-region:
        required: true
        type: string
      cluster-name:
        type: string
        required: true
      server-task-arn:
        required: true
        type: string
      cli-task-arn:
        required: true
        type: string

    secrets:
      AWS_ASSUME_ROLE_ARN:
        required: true

env:
  CLI_ECR_REPOSITORY: instant-term-cli           
  SERVER_ECR_REPOSITORY: instant-term-server           
  CLI_ECS_SERVICE: instant-term-cli-service                
  SERVER_ECS_SERVICE: instant-term-server-service               

jobs:
  build:
    name: Build and Push Images
    runs-on: ubuntu-latest
    outputs:
      server-image: ${{ steps.build-server.outputs.image }}
      cli-image: ${{ steps.build-cli.outputs.image }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ASSUME_ROLE_ARN }}
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: ${{ inputs.aws-region }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push server image
        id: build-server
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/${{ env.SERVER_ECR_REPOSITORY }}:$IMAGE_TAG -f server/Dockerfile .
          docker push $ECR_REGISTRY/${{ env.SERVER_ECR_REPOSITORY }}:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/${{ env.SERVER_ECR_REPOSITORY }}:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Build and push CLI image
        id: build-cli
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/${{ env.CLI_ECR_REPOSITORY }}:$IMAGE_TAG -f cli/Dockerfile .
          docker push $ECR_REGISTRY/${{ env.CLI_ECR_REPOSITORY }}:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/${{ env.CLI_ECR_REPOSITORY }}:$IMAGE_TAG" >> $GITHUB_OUTPUT

  deploy-server:
    name: Deploy Server
    needs: build
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ASSUME_ROLE_ARN }}
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: ${{ inputs.aws-region }}

      - name: Download server task definition
        run: |
          aws ecs describe-task-definition --task-definition ${{ inputs.server-task-arn }} --query taskDefinition > server-task-definition.json

      - name: Fill in the server image in ECS task definition
        id: render-server
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: server-task-definition.json
          container-name: instant-term-server-container
          image: ${{ needs.build.outputs.server-image }}

      - name: Deploy Server to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-server.outputs.task-definition }}
          service: ${{ env.SERVER_ECS_SERVICE }}
          cluster: ${{ inputs.cluster-name }}
          wait-for-service-stability: true

  deploy-cli:
    name: Deploy CLI
    needs: build
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ASSUME_ROLE_ARN }}
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: ${{ inputs.aws-region }}

      - name: Download CLI task definition
        run: |
          aws ecs describe-task-definition --task-definition ${{ inputs.cli-task-arn }} --query taskDefinition > cli-task-definition.json

      - name: Fill in the CLI image in ECS task definition
        id: render-cli
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: cli-task-definition.json
          container-name: instant-term-cli-container
          image: ${{ needs.build.outputs.cli-image }}

      - name: Deploy CLI to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-cli.outputs.task-definition }}
          service: ${{ env.CLI_ECS_SERVICE }}
          cluster: ${{ inputs.cluster-name }}
          wait-for-service-stability: true
